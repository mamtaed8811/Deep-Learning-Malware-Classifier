from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D
from keras.layers import Activation, Dropout, Flatten, Dense
from keras import backend as K 
import h5py
import matplotlib.pyplot as plt
import numpy as np 
from keras.applications.vgg16 import VGG16
from keras.models import model_from_json
from keras import callbacks
from keras.callbacks import ModelCheckpoint, TensorBoard, Callback
from keras.utils import np_utils
from keras.models import load_model
from keras.preprocessing.image import img_to_array, load_img

#to suppress tf warnings on terminal
import os
os.environ['TF_CPP_MIN_LOG_LEVEL']='2'
import tensorflow as tf
#to avoid dimension mismatch error
# from keras import backend as K
# K.set_image_dim_ordering('th')

features_test= np.load(open('D:/Mamta/Project/Data/models/model2/model2_features_test','rb'))
#features_test.reshape(-1,1)
test_labels= np.array([0]*154 + [1]*248 + [2]*294 + [3]*47 + [4]*4 + [5]*75 + [6]*40 + [7]*123 + [8]*101)

json_file = open('D:/Mamta/Project/Data/models/model2/model2.json', 'r')
model_json= json_file.read()
json_file.close()
model = model_from_json(model_json)

# model = load_model('D:/Mamta/Project/Data/models/model3/model3.h5')

model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
model.load_weights('D:/Mamta/Project/Data/models/model2/model2_weights.h5')
score = model.predict_classes(features_test).reshape(-1,1)
score = score.tofile('D:/Mamta/Project/Data/models/model2/prediction_score.csv',sep=',',format='%10.5f')


