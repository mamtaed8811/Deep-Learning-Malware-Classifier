import numpy as np 
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dropout, Dense, Flatten
from keras import applications
from keras.utils import np_utils

#to match the image dimension in tf and the code which is in theano
from keras import backend as K
K.set_image_dim_ordering('tf')

#to suppress tf warnings on terminal
import os
os.environ['TF_CPP_MIN_LOG_LEVEL']='2'
import tensorflow as tf

# dimensions of our images.
img_width, img_height = 150, 150

top_model_weights_path = 'D:/Mamta/Project/Data/bottleneck_fc_model.h5'
train_data_dir = 'D:/Mamta/Project/Data/Data_arrangement_families/Train/'
test_data_dir = 'D:/Mamta/Project/Data/Data_arrangement_families/Test/'
nb_train_samples = 8690
nb_test_samples = 1092
epochs = 50
batch_size = 128

def save_bottleneck_features():
	datagen = ImageDataGenerator(rescale = 1./255)
	
	#build the VGG16 network
	
	model = applications.VGG16(include_top = False, weights = 'imagenet')
	
	generator = datagen.flow_from_directory(
		       train_data_dir,
		       target_size = (img_width, img_height),
		       batch_size = batch_size,
		       class_mode = None,
		       shuffle = False)

	bottleneck_features_train = model.predict_generator(
		                   generator, nb_train_samples / batch_size)

	np.save(open('bottleneck_features_train','wb'), bottleneck_features_train)

	generator = datagen.flow_from_directory(
		        test_data_dir,
		        target_size = (img_width, img_height),
		        batch_size = batch_size,
		        class_mode = None,
		        shuffle = False)

	bottleneck_features_test = model.predict_generator(
		                       generator, nb_test_samples / batch_size)
	np.save(open('bottleneck_features_test','wb'), bottleneck_features_test)


def train_top_model():
	train_data = np.load(open('bottleneck_features_train','rb'))
	train_labels = np.array(
		[0]*1232 + [1]*1982 + [2]*2353 + [3]*380 + [4]*33 + [5]*600 + [6]*318 + [7]*982 + [8]*810 )
	train_labels = np_utils.to_categorical(train_labels)

	validation_data = np.load(open('bottleneck_features_test','rb'))
	validation_labels = np.array(
		[0]*155 + [1]*248 + [2]*295 + [3]*48 + [4]*5 + [5]*76 + [6]*40 + [7]*123 + [8]*102)
	validation_labels = np_utils.to_categorical(validation_labels)


	model = Sequential()
	model.add(Flatten(input_shape= train_data.shape[1:]))
	model.add(Dense(256, activation = 'relu'))
	model.add(Dropout(0.5))
	model.add(Dense(9, activation = 'softmax'))
	
	model.compile(optimizer = 'adam',
    	          loss = 'categorical_crossentropy',
    	          metrics = ['accuracy'])
	
	model.fit(train_data, train_labels,
    	      epochs = epochs,
    	      batch_size = batch_size,
    	      validation_data = (validation_data, validation_labels))
	
	model.save_weights(top_model_weights_path)

def predict_images():


save_bottleneck_features()

train_top_model()
