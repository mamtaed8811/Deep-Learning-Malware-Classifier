import numpy as np
import scipy.misc
from keras.applications.vgg16 import VGG16
from keras.preprocessing import image
from keras.applications.vgg16 import preprocess_input
from keras.utils import np_utils
#from keras.utils.np_utils import probas_to_classes
from keras.models import model_from_json
from keras.models import load_model
from keras import backend as K
K.set_image_dim_ordering('tf')

import os
os.environ['TF_CPP_MIN_LOG_LEVEL']='2'
import tensorflow as tf

image_path = 'D:/Mamta/Project/Data/pred/b.jpg'


classifier_path = 'D:/Mamta/Project/Data/models/model2/model2.json'
weights_path = 'D:/Mamta/Project/Data/models/model2/model2_weights.h5'

def vgg16(img_path):
    print('Loading VGG16')
    model = VGG16(weights='imagenet', include_top=False )
    img = image.load_img(img_path, target_size=(150, 150))
    x = image.img_to_array(img)
    x = x/255
    #print(x.shape)
    x = np.expand_dims(x, axis=0)
    #x = preprocess_input(x)
    features = model.predict(x)
    #print(features)
    return features
    

def load_model(model_def_fname, model_weight_fname):
    model = model_from_json(open(model_def_fname).read())
    model.load_weights(model_weight_fname)
    return model
 
def head_model(bottom_features):
    print('loading the top model')
    model = load_model(classifier_path, weights_path)
    prediction = model.predict_classes(bottom_features,batch_size=32, verbose=1)
    probability = model.predict(bottom_features,batch_size=32, verbose=1)
    return prediction, probability
    
       
if __name__ == '__main__':

    bottom_features = vgg16(image_path)
    
    prediction, probability = head_model(bottom_features)
    
    #print(prediction, probability)
    print(prediction)
    if prediction==0:
        print("Ramnit")
    elif prediction==1:
        print("Lollipop") 
    elif prediction==2:
        print("Kelihos_ver3") 
    elif prediction==3:
        print("Vundo")
    elif prediction==4:
        print("Simda") 
    elif prediction==5:
        print("Tracur") 
    elif prediction==6:
        print("Kelihos_ver1") 
    elif prediction==7:
        print("Obfuscator.ACY")
    elif prediction==8:
        print("Gatak")

    print(probability)
    